generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TicketStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

model Tenant {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  categories  Category[]
  tickets     Ticket[]
  invitations Invitation[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryToChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryToChildren")
  tickets     Ticket[]
  tenantId    String?
  tenant      Tenant?    @relation(fields: [tenantId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([parentId, name])
  @@index([parentId])
  @@index([tenantId])
}

model Ticket {
  id          String          @id @default(uuid())
  title       String
  description String?
  status      TicketStatus    @default(TODO)
  priority    TicketPriority  @default(MEDIUM)
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?           @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  comments    Comment[]
  history     TicketHistory[]
  tenantId    String?
  tenant      Tenant?         @relation(fields: [tenantId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([categoryId])
  @@index([assigneeId])
  @@index([tenantId])
}

model Comment {
  id        String   @id @default(uuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  body      String
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([ticketId])
  @@index([userId])
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  name            String?
  passwordHash    String
  tenantId        String?
  tenant          Tenant?         @relation(fields: [tenantId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  assigned        Ticket[]
  history         TicketHistory[]
  invitationsSent Invitation[]    @relation("InvitedBy")
  comments        Comment[]
}

model TicketHistory {
  id        String   @id @default(uuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  field     String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  @@index([ticketId])
  @@index([userId])
}

model Invitation {
  id          String   @id @default(uuid())
  email       String
  token       String   @unique
  status      String   @default("PENDING")
  expiresAt   DateTime
  invitedById String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invitedBy User   @relation("InvitedBy", fields: [invitedById], references: [id])
  tenant    Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([email, tenantId])
}
